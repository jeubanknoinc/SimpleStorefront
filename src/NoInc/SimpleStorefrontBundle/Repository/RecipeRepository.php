<?php

namespace NoInc\SimpleStorefrontBundle\Repository;

/**
 * RecipeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RecipeRepository extends \Doctrine\ORM\EntityRepository
{
    public function getRecipesAndIngredients()
    {
	

        $recipes = $this->createQueryBuilder('recipe')
        ->addSelect('recipe')
        ->addSelect('recipeIngredients')
        ->addSelect('ingredient')
        ->addSelect('products')
        ->join('recipe.recipeIngredients', 'recipeIngredients')
        ->join('recipeIngredients.ingredient', 'ingredient')
        ->leftJoin('recipe.products', 'products')
        ->getQuery()
        ->getResult();
        
        return $recipes;
    }
//rewrite as update query
	public function getRecipeIngredientNewStocks()
	{
		$difference = $this->createQueryBuilder('recipe')
		->addSelect('(ingredient.stock - recipeIngredients.quantity) as newStock')
		->join('recipe.recipeIngredients', 'recipeIngredients')
		->join('recipeIngredients.ingredient', 'ingredient')
		->getQuery()
		->getResult();

		return $difference;
	}

	public function findRecipeIngredientOutOfStocks($recipeName = null)
	{
		$negatives = $this->createQueryBuilder('recipe')
		->addSelect('(ingredient.stock - recipeIngredients.quantity) as newStock')
		->join('recipe.recipeIngredients', 'recipeIngredients')
		->join('recipeIngredients.ingredient', 'ingredient')
		->where('recipe.name = ?1')
		->andWhere('(ingredient.stock - recipeIngredients.quantity) <= 0')
		->setParameter(1,$recipeName)
		->getQuery()
		->getResult();

		return $negatives;
	}

	public function findAvailableProducts($recipeName = null)
	{
		$availableProducts = $this->createQueryBuilder('recipe')
		->addSelect('products')
		->leftJoin('recipe.products', 'products')
		->where('recipe.name = ?1')
		->andWhere('products.cart_flag = 0')
		->setParameter(1,$recipeName)
		->getQuery()
		->getResult();

		return $availableProducts;
	}

}
